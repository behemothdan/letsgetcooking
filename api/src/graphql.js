import { typeDefs, resolvers } from "./graphql-schema";
import { ApolloServer, gql, makeExecutableSchema } from "apollo-server-lambda";
import { v1 as neo4j } from "neo4j-driver";
import { augmentSchema } from "neo4j-graphql-js";
import dotenv from "dotenv";

dotenv.config();

const schema = makeExecutableSchema({
    typeDefs,
    resolvers
});

// augmentSchema will add autogenerated mutations based on types in schema - this goes with line 31
const augmentedSchema = augmentSchema(schema);

const driver = neo4j.driver(
    process.env.NEO4J_URI || "bolt://ec2-52-89-41-121.us-west-2.compute.amazonaws.com:7687",
    neo4j.auth.basic(
        process.env.NEO4J_USER || "neo4j",
        process.env.NEO4J_PASSWORD || "i-0f092b6063819fecd"
    )
);

const server = new ApolloServer({
    // using augmentedSchema (executable GraphQLSchemaObject) instead of typeDefs and resolvers
    typeDefs,
    resolvers,
    context: {
        driver
    },
    // comment out schema and uncomment typeDefs and resolvers above to use original (unaugmented) schema
    schema: augmentedSchema
});

exports.graphqlHandler = server.createHandler({
  cors: {
        origin: '*',
        methods: 'POST',
        credentials: true,
        allowedHeaders: [
          'Content-Type',
          'Origin',
          'Accept'
        ]
      }
  });