// Uncomment this section if I want to run locally.
import { typeDefs, resolvers } from "./graphql-schema";
import { ApolloServer, gql, makeExecutableSchema } from "apollo-server";
import { v1 as neo4j } from "neo4j-driver";
import { augmentSchema } from "neo4j-graphql-js";
import dotenv from "dotenv";

// This section must be uncommented when using serverless deploy
// const { typeDefs, resolvers } =  require("./graphql-schema");
// const { ApolloServer, gql, makeExecutableSchema } = require("apollo-server-lambda");
// const { v1: neo4j } = require("neo4j-driver");
// const { augmentSchema } = require("neo4j-graphql-js");
// const dotenv = require("dotenv");

dotenv.config();

const schema = makeExecutableSchema({
    typeDefs,
    resolvers
});

// augmentSchema will add autogenerated mutations based on types in schema - this goes with line 31
const augmentedSchema = augmentSchema(schema);

// Have to make an easier way to switch from local to prod.
// const driver = neo4j.driver(
//     process.env.NEO4J_URI_PRODUCTION || process.env.NEO4J_URI_LOCAL,
//     neo4j.auth.basic(
//         process.env.NEO4J_USER_PRODUCTION || process.env.NEO4J_USER_LOCAL,
//         process.env.NEO4J_PASSWORD_PRODUCTION || process.env.NEO4J_PASSWORD_LOCAL
//     )
// );

const driver = neo4j.driver(
    process.env.NEO4J_URI_LOCAL,
    neo4j.auth.basic(
        process.env.NEO4J_USER_LOCAL,
        process.env.NEO4J_PASSWORD_LOCAL
    )
);

const server = new ApolloServer({
    // using augmentedSchema (executable GraphQLSchemaObject) instead of typeDefs and resolvers
    typeDefs,
    resolvers,
    context: {
        driver
    },
    // comment out schema and uncomment typeDefs and resolvers above to use original (unaugmented) schema
    schema: augmentedSchema
});

//This is for local development.
server.listen().then(({
    url
}) => {
    console.log(`ðŸš€: GraphQL API ready at ${url}`);
});

// Only for serverless deploy
// exports.graphqlHandler = server.createHandler({
//     cors: {
//           origin: '*',
//           methods: 'POST',
//           credentials: true,
//           allowedHeaders: [
//             'Content-Type',
//             'Origin',
//             'Accept'
//           ]
//         }
//     });