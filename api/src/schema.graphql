type Recipe {
    name: String
    time: String
    slug: String
    instructions: [String]
    ingredients: [Ingredients]
    mealtype: MealType @relation(name:"Type_Of", direction:"OUT")
    difficulty: Difficulty @relation(name:"Skill_Level", direction: "OUT")
    creator: Creator
}

type User {
    id: String!
    name: String
    given_name: String
    email: String
    date: String @cypher(statement: "MATCH (:Recipe)-[c:Created_By]-(this) RETURN c.date")
    created: Creator
}

type Creator @relation(name: "Created_By") {
	from: Recipe
	to: User
	date: String
}

type Ingredient {
    name: String!
    quantity: String @cypher(statement:"MATCH (:Recipe)-[c:Contains]-(this) RETURN c.quantity")
    for: Ingredients
}

type Ingredients @relation(name: "Contains") {
	from: Recipe
	to: Ingredient
	quantity: String
}

type MealType {
    type: String
    recipe: Recipe @relation(name:"Type_Of", direction:"IN")
}

type Difficulty {
    value: String
    recipe: Recipe @relation(name:"Skill_Level", direction:"IN")
}

type Query {
  RecipesByExactName(searchQuery: String): [Recipe] @cypher(statement:
    "MATCH (r:Recipe {name: toLower($searchQuery)}) return r")

  RecipeBySlug(slugQuery: String): Recipe @cypher(statement:
    "MATCH (r:Recipe {slug: $slugQuery}) return r")

  RecipesBySubstring(searchQuery: String): [Recipe] @cypher(statement:
    "MATCH (r:Recipe) WHERE toLower(r.name) CONTAINS toLower($searchQuery) OR toLower(r.time) CONTAINS toLower($searchQuery) RETURN r ORDER BY r.name ASC")

  IngredientsBySubstring(ingredientQuery: String): [Ingredient] @cypher(statement:
    "MATCH (i:Ingredient) WHERE toLower(i.name) CONTAINS toLower($ingredientQuery) RETURN i")

  UserById(id: String): [User] @cypher(statement:
    "MATCH (u:User {id: $id}) return u")
}

type Mutation {
  CreateRecipe (
    name: String
    time: String
    slug: String
    instructions: [String]
  ): Recipe
}